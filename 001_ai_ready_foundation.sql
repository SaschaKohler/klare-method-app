-- =====================================================
-- AI-Ready Database Foundation Migration
-- Based on original strategy - Complete recreation
-- =====================================================

-- This migration creates the complete AI-ready database structure
-- File: 001_ai_ready_foundation.sql

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =======================================
-- 1. CORE USER SYSTEM
-- =======================================

-- Main users table (references auth.users)
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT,
  email TEXT UNIQUE,
  progress INTEGER DEFAULT 0,
  streak INTEGER DEFAULT 0,
  last_active TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  join_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  completed_modules TEXT[] DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enhanced user profiles for AI personalization
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  learning_style JSONB DEFAULT '{}',
  communication_preferences JSONB DEFAULT '{}',
  progress_patterns JSONB DEFAULT '{}',
  personality_insights JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);

-- =======================================
-- 2. LIFE WHEEL SYSTEM
-- =======================================

-- Life wheel snapshots for progression tracking
CREATE TABLE IF NOT EXISTS life_wheel_snapshots (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  snapshot_data JSONB NOT NULL,
  snapshot_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Individual life wheel areas
CREATE TABLE IF NOT EXISTS life_wheel_areas (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  current_value INTEGER NOT NULL CHECK (current_value >= 0 AND current_value <= 10),
  target_value INTEGER NOT NULL CHECK (target_value >= 0 AND target_value <= 10),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, name)
);

-- =======================================
-- 3. AI INTEGRATION SYSTEM
-- =======================================

-- AI conversations for context awareness
CREATE TABLE IF NOT EXISTS ai_conversations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  conversation_type TEXT NOT NULL, -- 'coaching', 'reflection', 'guidance'
  messages JSONB NOT NULL DEFAULT '[]',
  context_data JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- AI prompt templates for dynamic content generation
CREATE TABLE IF NOT EXISTS ai_prompt_templates (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL UNIQUE,
  template_text TEXT NOT NULL,
  variables JSONB DEFAULT '{}',
  category TEXT NOT NULL, -- 'reflection', 'guidance', 'exercise'
  klare_step TEXT CHECK (klare_step IN ('K', 'L', 'A', 'R', 'E')),
  personalization_rules JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Personal insights generated by AI
CREATE TABLE IF NOT EXISTS personal_insights (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  insight_type TEXT NOT NULL,
  content TEXT NOT NULL,
  confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),
  source_data JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  acknowledged_at TIMESTAMP WITH TIME ZONE
);

-- =======================================
-- 4. MODULE SYSTEM
-- =======================================

-- Core modules (K-L-A-R-E steps)
CREATE TABLE IF NOT EXISTS modules (
  id TEXT PRIMARY KEY, -- 'k-intro', 'l-vitality', etc.
  klare_step TEXT NOT NULL CHECK (klare_step IN ('K', 'L', 'A', 'R', 'E')),
  title TEXT NOT NULL,
  description TEXT,
  order_index INTEGER NOT NULL,
  difficulty_level INTEGER DEFAULT 1 CHECK (difficulty_level >= 1 AND difficulty_level <= 10),
  estimated_duration INTEGER, -- minutes
  prerequisites TEXT[] DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Completed modules tracking
CREATE TABLE IF NOT EXISTS completed_modules (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  module_id TEXT NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
  completion_data JSONB DEFAULT '{}',
  completion_score DECIMAL(3,2),
  completed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, module_id)
);

-- User answers and responses
CREATE TABLE IF NOT EXISTS user_answers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  module_id TEXT NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
  question_id TEXT NOT NULL,
  answer_data JSONB NOT NULL,
  ai_analysis JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =======================================
-- 5. CONTENT SYSTEM (HYBRID AI/STATIC)
-- =======================================

-- Static content (fallback)
CREATE TABLE IF NOT EXISTS static_content (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content_key TEXT NOT NULL UNIQUE,
  content_type TEXT NOT NULL, -- 'text', 'exercise', 'reflection'
  content_data JSONB NOT NULL,
  translations JSONB DEFAULT '{}',
  klare_step TEXT CHECK (klare_step IN ('K', 'L', 'A', 'R', 'E')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Generated content (AI-created)
CREATE TABLE IF NOT EXISTS generated_content (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  content_key TEXT NOT NULL,
  content_data JSONB NOT NULL,
  generation_prompt TEXT,
  ai_model TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE
);

-- =======================================
-- 6. INDEXES FOR PERFORMANCE
-- =======================================

-- User-related indexes
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_last_active ON users(last_active);
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);

-- Life wheel indexes
CREATE INDEX IF NOT EXISTS idx_life_wheel_snapshots_user_date ON life_wheel_snapshots(user_id, snapshot_date);
CREATE INDEX IF NOT EXISTS idx_life_wheel_areas_user_id ON life_wheel_areas(user_id);

-- AI system indexes
CREATE INDEX IF NOT EXISTS idx_ai_conversations_user_type ON ai_conversations(user_id, conversation_type);
CREATE INDEX IF NOT EXISTS idx_ai_prompt_templates_category ON ai_prompt_templates(category);
CREATE INDEX IF NOT EXISTS idx_personal_insights_user_type ON personal_insights(user_id, insight_type);

-- Module system indexes
CREATE INDEX IF NOT EXISTS idx_modules_klare_step ON modules(klare_step);
CREATE INDEX IF NOT EXISTS idx_completed_modules_user_id ON completed_modules(user_id);
CREATE INDEX IF NOT EXISTS idx_user_answers_user_module ON user_answers(user_id, module_id);

-- Content system indexes
CREATE INDEX IF NOT EXISTS idx_static_content_key ON static_content(content_key);
CREATE INDEX IF NOT EXISTS idx_generated_content_user_key ON generated_content(user_id, content_key);
CREATE INDEX IF NOT EXISTS idx_generated_content_expires ON generated_content(expires_at);

-- =======================================
-- 7. UPDATED_AT TRIGGER FUNCTION
-- =======================================

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at triggers
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_user_profiles_updated_at ON user_profiles;
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_life_wheel_areas_updated_at ON life_wheel_areas;
CREATE TRIGGER update_life_wheel_areas_updated_at BEFORE UPDATE ON life_wheel_areas FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_ai_conversations_updated_at ON ai_conversations;
CREATE TRIGGER update_ai_conversations_updated_at BEFORE UPDATE ON ai_conversations FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_ai_prompt_templates_updated_at ON ai_prompt_templates;
CREATE TRIGGER update_ai_prompt_templates_updated_at BEFORE UPDATE ON ai_prompt_templates FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_modules_updated_at ON modules;
CREATE TRIGGER update_modules_updated_at BEFORE UPDATE ON modules FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_user_answers_updated_at ON user_answers;
CREATE TRIGGER update_user_answers_updated_at BEFORE UPDATE ON user_answers FOR EACH ROW EXECUTE FUNCTION update_updated_at();

DROP TRIGGER IF EXISTS update_static_content_updated_at ON static_content;
CREATE TRIGGER update_static_content_updated_at BEFORE UPDATE ON static_content FOR EACH ROW EXECUTE FUNCTION update_updated_at();